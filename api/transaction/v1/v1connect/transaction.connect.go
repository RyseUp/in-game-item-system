// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/transaction/v1/transaction.proto

package v1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/RyseUp/in-game-item-system/api/transaction/v1"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion1_7_0

const (
	// TransactionAPIName is the fully-qualified name of the TransactionAPI service.
	TransactionAPIName = "api.v1.transaction.TransactionAPI"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TransactionAPICreateTransactionProcedure is the fully-qualified name of the TransactionAPI's
	// CreateTransaction RPC.
	TransactionAPICreateTransactionProcedure = "/api.v1.transaction.TransactionAPI/CreateTransaction"
	// TransactionAPIGetTransactionProcedure is the fully-qualified name of the TransactionAPI's
	// GetTransaction RPC.
	TransactionAPIGetTransactionProcedure = "/api.v1.transaction.TransactionAPI/GetTransaction"
	// TransactionAPIListTransactionsProcedure is the fully-qualified name of the TransactionAPI's
	// ListTransactions RPC.
	TransactionAPIListTransactionsProcedure = "/api.v1.transaction.TransactionAPI/ListTransactions"
)

// TransactionAPIClient is a client for the api.v1.transaction.TransactionAPI service.
type TransactionAPIClient interface {
	CreateTransaction(context.Context, *connect_go.Request[v1.CreateTransactionRequest]) (*connect_go.Response[v1.CreateTransactionResponse], error)
	GetTransaction(context.Context, *connect_go.Request[v1.GetTransactionRequest]) (*connect_go.Response[v1.GetTransactionResponse], error)
	ListTransactions(context.Context, *connect_go.Request[v1.ListTransactionsRequest]) (*connect_go.Response[v1.ListTransactionsResponse], error)
}

// NewTransactionAPIClient constructs a client for the api.v1.transaction.TransactionAPI service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTransactionAPIClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) TransactionAPIClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &transactionAPIClient{
		createTransaction: connect_go.NewClient[v1.CreateTransactionRequest, v1.CreateTransactionResponse](
			httpClient,
			baseURL+TransactionAPICreateTransactionProcedure,
			opts...,
		),
		getTransaction: connect_go.NewClient[v1.GetTransactionRequest, v1.GetTransactionResponse](
			httpClient,
			baseURL+TransactionAPIGetTransactionProcedure,
			connect_go.WithIdempotency(connect_go.IdempotencyNoSideEffects),
			connect_go.WithClientOptions(opts...),
		),
		listTransactions: connect_go.NewClient[v1.ListTransactionsRequest, v1.ListTransactionsResponse](
			httpClient,
			baseURL+TransactionAPIListTransactionsProcedure,
			connect_go.WithIdempotency(connect_go.IdempotencyNoSideEffects),
			connect_go.WithClientOptions(opts...),
		),
	}
}

// transactionAPIClient implements TransactionAPIClient.
type transactionAPIClient struct {
	createTransaction *connect_go.Client[v1.CreateTransactionRequest, v1.CreateTransactionResponse]
	getTransaction    *connect_go.Client[v1.GetTransactionRequest, v1.GetTransactionResponse]
	listTransactions  *connect_go.Client[v1.ListTransactionsRequest, v1.ListTransactionsResponse]
}

// CreateTransaction calls api.v1.transaction.TransactionAPI.CreateTransaction.
func (c *transactionAPIClient) CreateTransaction(ctx context.Context, req *connect_go.Request[v1.CreateTransactionRequest]) (*connect_go.Response[v1.CreateTransactionResponse], error) {
	return c.createTransaction.CallUnary(ctx, req)
}

// GetTransaction calls api.v1.transaction.TransactionAPI.GetTransaction.
func (c *transactionAPIClient) GetTransaction(ctx context.Context, req *connect_go.Request[v1.GetTransactionRequest]) (*connect_go.Response[v1.GetTransactionResponse], error) {
	return c.getTransaction.CallUnary(ctx, req)
}

// ListTransactions calls api.v1.transaction.TransactionAPI.ListTransactions.
func (c *transactionAPIClient) ListTransactions(ctx context.Context, req *connect_go.Request[v1.ListTransactionsRequest]) (*connect_go.Response[v1.ListTransactionsResponse], error) {
	return c.listTransactions.CallUnary(ctx, req)
}

// TransactionAPIHandler is an implementation of the api.v1.transaction.TransactionAPI service.
type TransactionAPIHandler interface {
	CreateTransaction(context.Context, *connect_go.Request[v1.CreateTransactionRequest]) (*connect_go.Response[v1.CreateTransactionResponse], error)
	GetTransaction(context.Context, *connect_go.Request[v1.GetTransactionRequest]) (*connect_go.Response[v1.GetTransactionResponse], error)
	ListTransactions(context.Context, *connect_go.Request[v1.ListTransactionsRequest]) (*connect_go.Response[v1.ListTransactionsResponse], error)
}

// NewTransactionAPIHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTransactionAPIHandler(svc TransactionAPIHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	transactionAPICreateTransactionHandler := connect_go.NewUnaryHandler(
		TransactionAPICreateTransactionProcedure,
		svc.CreateTransaction,
		opts...,
	)
	transactionAPIGetTransactionHandler := connect_go.NewUnaryHandler(
		TransactionAPIGetTransactionProcedure,
		svc.GetTransaction,
		connect_go.WithIdempotency(connect_go.IdempotencyNoSideEffects),
		connect_go.WithHandlerOptions(opts...),
	)
	transactionAPIListTransactionsHandler := connect_go.NewUnaryHandler(
		TransactionAPIListTransactionsProcedure,
		svc.ListTransactions,
		connect_go.WithIdempotency(connect_go.IdempotencyNoSideEffects),
		connect_go.WithHandlerOptions(opts...),
	)
	return "/api.v1.transaction.TransactionAPI/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TransactionAPICreateTransactionProcedure:
			transactionAPICreateTransactionHandler.ServeHTTP(w, r)
		case TransactionAPIGetTransactionProcedure:
			transactionAPIGetTransactionHandler.ServeHTTP(w, r)
		case TransactionAPIListTransactionsProcedure:
			transactionAPIListTransactionsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTransactionAPIHandler returns CodeUnimplemented from all methods.
type UnimplementedTransactionAPIHandler struct{}

func (UnimplementedTransactionAPIHandler) CreateTransaction(context.Context, *connect_go.Request[v1.CreateTransactionRequest]) (*connect_go.Response[v1.CreateTransactionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.transaction.TransactionAPI.CreateTransaction is not implemented"))
}

func (UnimplementedTransactionAPIHandler) GetTransaction(context.Context, *connect_go.Request[v1.GetTransactionRequest]) (*connect_go.Response[v1.GetTransactionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.transaction.TransactionAPI.GetTransaction is not implemented"))
}

func (UnimplementedTransactionAPIHandler) ListTransactions(context.Context, *connect_go.Request[v1.ListTransactionsRequest]) (*connect_go.Response[v1.ListTransactionsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.transaction.TransactionAPI.ListTransactions is not implemented"))
}
