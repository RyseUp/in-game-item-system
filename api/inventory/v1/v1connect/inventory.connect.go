// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/inventory/v1/inventory.proto

package v1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/RyseUp/in-game-item-system/api/inventory/v1"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion1_7_0

const (
	// InventoryAPIName is the fully-qualified name of the InventoryAPI service.
	InventoryAPIName = "api.inventory.v1.InventoryAPI"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// InventoryAPIUserGetInventoryProcedure is the fully-qualified name of the InventoryAPI's
	// UserGetInventory RPC.
	InventoryAPIUserGetInventoryProcedure = "/api.inventory.v1.InventoryAPI/UserGetInventory"
	// InventoryAPIUserAddItemInInventoryProcedure is the fully-qualified name of the InventoryAPI's
	// UserAddItemInInventory RPC.
	InventoryAPIUserAddItemInInventoryProcedure = "/api.inventory.v1.InventoryAPI/UserAddItemInInventory"
	// InventoryAPIUserUseItemInInventoryProcedure is the fully-qualified name of the InventoryAPI's
	// UserUseItemInInventory RPC.
	InventoryAPIUserUseItemInInventoryProcedure = "/api.inventory.v1.InventoryAPI/UserUseItemInInventory"
)

// InventoryAPIClient is a client for the api.inventory.v1.InventoryAPI service.
type InventoryAPIClient interface {
	UserGetInventory(context.Context, *connect_go.Request[v1.UserGetInventoryRequest]) (*connect_go.Response[v1.UserGetInventoryResponse], error)
	UserAddItemInInventory(context.Context, *connect_go.Request[v1.UserAddItemInInventoryRequest]) (*connect_go.Response[v1.UserAddItemInInventoryResponse], error)
	UserUseItemInInventory(context.Context, *connect_go.Request[v1.UserUseItemInInventoryRequest]) (*connect_go.Response[v1.UserUseItemInInventoryResponse], error)
}

// NewInventoryAPIClient constructs a client for the api.inventory.v1.InventoryAPI service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewInventoryAPIClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) InventoryAPIClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &inventoryAPIClient{
		userGetInventory: connect_go.NewClient[v1.UserGetInventoryRequest, v1.UserGetInventoryResponse](
			httpClient,
			baseURL+InventoryAPIUserGetInventoryProcedure,
			connect_go.WithIdempotency(connect_go.IdempotencyNoSideEffects),
			connect_go.WithClientOptions(opts...),
		),
		userAddItemInInventory: connect_go.NewClient[v1.UserAddItemInInventoryRequest, v1.UserAddItemInInventoryResponse](
			httpClient,
			baseURL+InventoryAPIUserAddItemInInventoryProcedure,
			opts...,
		),
		userUseItemInInventory: connect_go.NewClient[v1.UserUseItemInInventoryRequest, v1.UserUseItemInInventoryResponse](
			httpClient,
			baseURL+InventoryAPIUserUseItemInInventoryProcedure,
			opts...,
		),
	}
}

// inventoryAPIClient implements InventoryAPIClient.
type inventoryAPIClient struct {
	userGetInventory       *connect_go.Client[v1.UserGetInventoryRequest, v1.UserGetInventoryResponse]
	userAddItemInInventory *connect_go.Client[v1.UserAddItemInInventoryRequest, v1.UserAddItemInInventoryResponse]
	userUseItemInInventory *connect_go.Client[v1.UserUseItemInInventoryRequest, v1.UserUseItemInInventoryResponse]
}

// UserGetInventory calls api.inventory.v1.InventoryAPI.UserGetInventory.
func (c *inventoryAPIClient) UserGetInventory(ctx context.Context, req *connect_go.Request[v1.UserGetInventoryRequest]) (*connect_go.Response[v1.UserGetInventoryResponse], error) {
	return c.userGetInventory.CallUnary(ctx, req)
}

// UserAddItemInInventory calls api.inventory.v1.InventoryAPI.UserAddItemInInventory.
func (c *inventoryAPIClient) UserAddItemInInventory(ctx context.Context, req *connect_go.Request[v1.UserAddItemInInventoryRequest]) (*connect_go.Response[v1.UserAddItemInInventoryResponse], error) {
	return c.userAddItemInInventory.CallUnary(ctx, req)
}

// UserUseItemInInventory calls api.inventory.v1.InventoryAPI.UserUseItemInInventory.
func (c *inventoryAPIClient) UserUseItemInInventory(ctx context.Context, req *connect_go.Request[v1.UserUseItemInInventoryRequest]) (*connect_go.Response[v1.UserUseItemInInventoryResponse], error) {
	return c.userUseItemInInventory.CallUnary(ctx, req)
}

// InventoryAPIHandler is an implementation of the api.inventory.v1.InventoryAPI service.
type InventoryAPIHandler interface {
	UserGetInventory(context.Context, *connect_go.Request[v1.UserGetInventoryRequest]) (*connect_go.Response[v1.UserGetInventoryResponse], error)
	UserAddItemInInventory(context.Context, *connect_go.Request[v1.UserAddItemInInventoryRequest]) (*connect_go.Response[v1.UserAddItemInInventoryResponse], error)
	UserUseItemInInventory(context.Context, *connect_go.Request[v1.UserUseItemInInventoryRequest]) (*connect_go.Response[v1.UserUseItemInInventoryResponse], error)
}

// NewInventoryAPIHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewInventoryAPIHandler(svc InventoryAPIHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	inventoryAPIUserGetInventoryHandler := connect_go.NewUnaryHandler(
		InventoryAPIUserGetInventoryProcedure,
		svc.UserGetInventory,
		connect_go.WithIdempotency(connect_go.IdempotencyNoSideEffects),
		connect_go.WithHandlerOptions(opts...),
	)
	inventoryAPIUserAddItemInInventoryHandler := connect_go.NewUnaryHandler(
		InventoryAPIUserAddItemInInventoryProcedure,
		svc.UserAddItemInInventory,
		opts...,
	)
	inventoryAPIUserUseItemInInventoryHandler := connect_go.NewUnaryHandler(
		InventoryAPIUserUseItemInInventoryProcedure,
		svc.UserUseItemInInventory,
		opts...,
	)
	return "/api.inventory.v1.InventoryAPI/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case InventoryAPIUserGetInventoryProcedure:
			inventoryAPIUserGetInventoryHandler.ServeHTTP(w, r)
		case InventoryAPIUserAddItemInInventoryProcedure:
			inventoryAPIUserAddItemInInventoryHandler.ServeHTTP(w, r)
		case InventoryAPIUserUseItemInInventoryProcedure:
			inventoryAPIUserUseItemInInventoryHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedInventoryAPIHandler returns CodeUnimplemented from all methods.
type UnimplementedInventoryAPIHandler struct{}

func (UnimplementedInventoryAPIHandler) UserGetInventory(context.Context, *connect_go.Request[v1.UserGetInventoryRequest]) (*connect_go.Response[v1.UserGetInventoryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.inventory.v1.InventoryAPI.UserGetInventory is not implemented"))
}

func (UnimplementedInventoryAPIHandler) UserAddItemInInventory(context.Context, *connect_go.Request[v1.UserAddItemInInventoryRequest]) (*connect_go.Response[v1.UserAddItemInInventoryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.inventory.v1.InventoryAPI.UserAddItemInInventory is not implemented"))
}

func (UnimplementedInventoryAPIHandler) UserUseItemInInventory(context.Context, *connect_go.Request[v1.UserUseItemInInventoryRequest]) (*connect_go.Response[v1.UserUseItemInInventoryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.inventory.v1.InventoryAPI.UserUseItemInInventory is not implemented"))
}
