// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/inventory/v1/inventory.proto

package v1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/RyseUp/in-game-item-system/api/inventory/v1"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion1_7_0

const (
	// InventoryAPIName is the fully-qualified name of the InventoryAPI service.
	InventoryAPIName = "api.inventory.v1.InventoryAPI"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// InventoryAPIGetInventoryProcedure is the fully-qualified name of the InventoryAPI's GetInventory
	// RPC.
	InventoryAPIGetInventoryProcedure = "/api.inventory.v1.InventoryAPI/GetInventory"
	// InventoryAPIUpdateInventoryProcedure is the fully-qualified name of the InventoryAPI's
	// UpdateInventory RPC.
	InventoryAPIUpdateInventoryProcedure = "/api.inventory.v1.InventoryAPI/UpdateInventory"
)

// InventoryAPIClient is a client for the api.inventory.v1.InventoryAPI service.
type InventoryAPIClient interface {
	GetInventory(context.Context, *connect_go.Request[v1.GetInventoryRequest]) (*connect_go.Response[v1.GetInventoryResponse], error)
	UpdateInventory(context.Context, *connect_go.Request[v1.UpdateInventoryRequest]) (*connect_go.Response[v1.UpdateInventoryResponse], error)
}

// NewInventoryAPIClient constructs a client for the api.inventory.v1.InventoryAPI service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewInventoryAPIClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) InventoryAPIClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &inventoryAPIClient{
		getInventory: connect_go.NewClient[v1.GetInventoryRequest, v1.GetInventoryResponse](
			httpClient,
			baseURL+InventoryAPIGetInventoryProcedure,
			connect_go.WithIdempotency(connect_go.IdempotencyNoSideEffects),
			connect_go.WithClientOptions(opts...),
		),
		updateInventory: connect_go.NewClient[v1.UpdateInventoryRequest, v1.UpdateInventoryResponse](
			httpClient,
			baseURL+InventoryAPIUpdateInventoryProcedure,
			opts...,
		),
	}
}

// inventoryAPIClient implements InventoryAPIClient.
type inventoryAPIClient struct {
	getInventory    *connect_go.Client[v1.GetInventoryRequest, v1.GetInventoryResponse]
	updateInventory *connect_go.Client[v1.UpdateInventoryRequest, v1.UpdateInventoryResponse]
}

// GetInventory calls api.inventory.v1.InventoryAPI.GetInventory.
func (c *inventoryAPIClient) GetInventory(ctx context.Context, req *connect_go.Request[v1.GetInventoryRequest]) (*connect_go.Response[v1.GetInventoryResponse], error) {
	return c.getInventory.CallUnary(ctx, req)
}

// UpdateInventory calls api.inventory.v1.InventoryAPI.UpdateInventory.
func (c *inventoryAPIClient) UpdateInventory(ctx context.Context, req *connect_go.Request[v1.UpdateInventoryRequest]) (*connect_go.Response[v1.UpdateInventoryResponse], error) {
	return c.updateInventory.CallUnary(ctx, req)
}

// InventoryAPIHandler is an implementation of the api.inventory.v1.InventoryAPI service.
type InventoryAPIHandler interface {
	GetInventory(context.Context, *connect_go.Request[v1.GetInventoryRequest]) (*connect_go.Response[v1.GetInventoryResponse], error)
	UpdateInventory(context.Context, *connect_go.Request[v1.UpdateInventoryRequest]) (*connect_go.Response[v1.UpdateInventoryResponse], error)
}

// NewInventoryAPIHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewInventoryAPIHandler(svc InventoryAPIHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	inventoryAPIGetInventoryHandler := connect_go.NewUnaryHandler(
		InventoryAPIGetInventoryProcedure,
		svc.GetInventory,
		connect_go.WithIdempotency(connect_go.IdempotencyNoSideEffects),
		connect_go.WithHandlerOptions(opts...),
	)
	inventoryAPIUpdateInventoryHandler := connect_go.NewUnaryHandler(
		InventoryAPIUpdateInventoryProcedure,
		svc.UpdateInventory,
		opts...,
	)
	return "/api.inventory.v1.InventoryAPI/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case InventoryAPIGetInventoryProcedure:
			inventoryAPIGetInventoryHandler.ServeHTTP(w, r)
		case InventoryAPIUpdateInventoryProcedure:
			inventoryAPIUpdateInventoryHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedInventoryAPIHandler returns CodeUnimplemented from all methods.
type UnimplementedInventoryAPIHandler struct{}

func (UnimplementedInventoryAPIHandler) GetInventory(context.Context, *connect_go.Request[v1.GetInventoryRequest]) (*connect_go.Response[v1.GetInventoryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.inventory.v1.InventoryAPI.GetInventory is not implemented"))
}

func (UnimplementedInventoryAPIHandler) UpdateInventory(context.Context, *connect_go.Request[v1.UpdateInventoryRequest]) (*connect_go.Response[v1.UpdateInventoryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.inventory.v1.InventoryAPI.UpdateInventory is not implemented"))
}
