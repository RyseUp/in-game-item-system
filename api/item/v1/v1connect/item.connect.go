// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/item/v1/item.proto

package v1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/RyseUp/in-game-item-system/api/item/v1"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion1_7_0

const (
	// ItemServiceName is the fully-qualified name of the ItemService service.
	ItemServiceName = "api.item.v1.ItemService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ItemServiceGetItemProcedure is the fully-qualified name of the ItemService's GetItem RPC.
	ItemServiceGetItemProcedure = "/api.item.v1.ItemService/GetItem"
	// ItemServiceCreateItemProcedure is the fully-qualified name of the ItemService's CreateItem RPC.
	ItemServiceCreateItemProcedure = "/api.item.v1.ItemService/CreateItem"
	// ItemServiceUpdateItemProcedure is the fully-qualified name of the ItemService's UpdateItem RPC.
	ItemServiceUpdateItemProcedure = "/api.item.v1.ItemService/UpdateItem"
	// ItemServiceDeleteItemProcedure is the fully-qualified name of the ItemService's DeleteItem RPC.
	ItemServiceDeleteItemProcedure = "/api.item.v1.ItemService/DeleteItem"
	// ItemServiceListItemsProcedure is the fully-qualified name of the ItemService's ListItems RPC.
	ItemServiceListItemsProcedure = "/api.item.v1.ItemService/ListItems"
)

// ItemServiceClient is a client for the api.item.v1.ItemService service.
type ItemServiceClient interface {
	GetItem(context.Context, *connect_go.Request[v1.GetItemRequest]) (*connect_go.Response[v1.GetItemResponse], error)
	CreateItem(context.Context, *connect_go.Request[v1.CreateItemRequest]) (*connect_go.Response[v1.CreateItemResponse], error)
	UpdateItem(context.Context, *connect_go.Request[v1.UpdateItemRequest]) (*connect_go.Response[v1.UpdateItemResponse], error)
	DeleteItem(context.Context, *connect_go.Request[v1.DeleteItemRequest]) (*connect_go.Response[v1.DeleteItemResponse], error)
	ListItems(context.Context, *connect_go.Request[v1.ListItemsRequest]) (*connect_go.Response[v1.ListItemsResponse], error)
}

// NewItemServiceClient constructs a client for the api.item.v1.ItemService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewItemServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ItemServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &itemServiceClient{
		getItem: connect_go.NewClient[v1.GetItemRequest, v1.GetItemResponse](
			httpClient,
			baseURL+ItemServiceGetItemProcedure,
			connect_go.WithIdempotency(connect_go.IdempotencyNoSideEffects),
			connect_go.WithClientOptions(opts...),
		),
		createItem: connect_go.NewClient[v1.CreateItemRequest, v1.CreateItemResponse](
			httpClient,
			baseURL+ItemServiceCreateItemProcedure,
			opts...,
		),
		updateItem: connect_go.NewClient[v1.UpdateItemRequest, v1.UpdateItemResponse](
			httpClient,
			baseURL+ItemServiceUpdateItemProcedure,
			opts...,
		),
		deleteItem: connect_go.NewClient[v1.DeleteItemRequest, v1.DeleteItemResponse](
			httpClient,
			baseURL+ItemServiceDeleteItemProcedure,
			opts...,
		),
		listItems: connect_go.NewClient[v1.ListItemsRequest, v1.ListItemsResponse](
			httpClient,
			baseURL+ItemServiceListItemsProcedure,
			connect_go.WithIdempotency(connect_go.IdempotencyNoSideEffects),
			connect_go.WithClientOptions(opts...),
		),
	}
}

// itemServiceClient implements ItemServiceClient.
type itemServiceClient struct {
	getItem    *connect_go.Client[v1.GetItemRequest, v1.GetItemResponse]
	createItem *connect_go.Client[v1.CreateItemRequest, v1.CreateItemResponse]
	updateItem *connect_go.Client[v1.UpdateItemRequest, v1.UpdateItemResponse]
	deleteItem *connect_go.Client[v1.DeleteItemRequest, v1.DeleteItemResponse]
	listItems  *connect_go.Client[v1.ListItemsRequest, v1.ListItemsResponse]
}

// GetItem calls api.item.v1.ItemService.GetItem.
func (c *itemServiceClient) GetItem(ctx context.Context, req *connect_go.Request[v1.GetItemRequest]) (*connect_go.Response[v1.GetItemResponse], error) {
	return c.getItem.CallUnary(ctx, req)
}

// CreateItem calls api.item.v1.ItemService.CreateItem.
func (c *itemServiceClient) CreateItem(ctx context.Context, req *connect_go.Request[v1.CreateItemRequest]) (*connect_go.Response[v1.CreateItemResponse], error) {
	return c.createItem.CallUnary(ctx, req)
}

// UpdateItem calls api.item.v1.ItemService.UpdateItem.
func (c *itemServiceClient) UpdateItem(ctx context.Context, req *connect_go.Request[v1.UpdateItemRequest]) (*connect_go.Response[v1.UpdateItemResponse], error) {
	return c.updateItem.CallUnary(ctx, req)
}

// DeleteItem calls api.item.v1.ItemService.DeleteItem.
func (c *itemServiceClient) DeleteItem(ctx context.Context, req *connect_go.Request[v1.DeleteItemRequest]) (*connect_go.Response[v1.DeleteItemResponse], error) {
	return c.deleteItem.CallUnary(ctx, req)
}

// ListItems calls api.item.v1.ItemService.ListItems.
func (c *itemServiceClient) ListItems(ctx context.Context, req *connect_go.Request[v1.ListItemsRequest]) (*connect_go.Response[v1.ListItemsResponse], error) {
	return c.listItems.CallUnary(ctx, req)
}

// ItemServiceHandler is an implementation of the api.item.v1.ItemService service.
type ItemServiceHandler interface {
	GetItem(context.Context, *connect_go.Request[v1.GetItemRequest]) (*connect_go.Response[v1.GetItemResponse], error)
	CreateItem(context.Context, *connect_go.Request[v1.CreateItemRequest]) (*connect_go.Response[v1.CreateItemResponse], error)
	UpdateItem(context.Context, *connect_go.Request[v1.UpdateItemRequest]) (*connect_go.Response[v1.UpdateItemResponse], error)
	DeleteItem(context.Context, *connect_go.Request[v1.DeleteItemRequest]) (*connect_go.Response[v1.DeleteItemResponse], error)
	ListItems(context.Context, *connect_go.Request[v1.ListItemsRequest]) (*connect_go.Response[v1.ListItemsResponse], error)
}

// NewItemServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewItemServiceHandler(svc ItemServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	itemServiceGetItemHandler := connect_go.NewUnaryHandler(
		ItemServiceGetItemProcedure,
		svc.GetItem,
		connect_go.WithIdempotency(connect_go.IdempotencyNoSideEffects),
		connect_go.WithHandlerOptions(opts...),
	)
	itemServiceCreateItemHandler := connect_go.NewUnaryHandler(
		ItemServiceCreateItemProcedure,
		svc.CreateItem,
		opts...,
	)
	itemServiceUpdateItemHandler := connect_go.NewUnaryHandler(
		ItemServiceUpdateItemProcedure,
		svc.UpdateItem,
		opts...,
	)
	itemServiceDeleteItemHandler := connect_go.NewUnaryHandler(
		ItemServiceDeleteItemProcedure,
		svc.DeleteItem,
		opts...,
	)
	itemServiceListItemsHandler := connect_go.NewUnaryHandler(
		ItemServiceListItemsProcedure,
		svc.ListItems,
		connect_go.WithIdempotency(connect_go.IdempotencyNoSideEffects),
		connect_go.WithHandlerOptions(opts...),
	)
	return "/api.item.v1.ItemService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ItemServiceGetItemProcedure:
			itemServiceGetItemHandler.ServeHTTP(w, r)
		case ItemServiceCreateItemProcedure:
			itemServiceCreateItemHandler.ServeHTTP(w, r)
		case ItemServiceUpdateItemProcedure:
			itemServiceUpdateItemHandler.ServeHTTP(w, r)
		case ItemServiceDeleteItemProcedure:
			itemServiceDeleteItemHandler.ServeHTTP(w, r)
		case ItemServiceListItemsProcedure:
			itemServiceListItemsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedItemServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedItemServiceHandler struct{}

func (UnimplementedItemServiceHandler) GetItem(context.Context, *connect_go.Request[v1.GetItemRequest]) (*connect_go.Response[v1.GetItemResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.item.v1.ItemService.GetItem is not implemented"))
}

func (UnimplementedItemServiceHandler) CreateItem(context.Context, *connect_go.Request[v1.CreateItemRequest]) (*connect_go.Response[v1.CreateItemResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.item.v1.ItemService.CreateItem is not implemented"))
}

func (UnimplementedItemServiceHandler) UpdateItem(context.Context, *connect_go.Request[v1.UpdateItemRequest]) (*connect_go.Response[v1.UpdateItemResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.item.v1.ItemService.UpdateItem is not implemented"))
}

func (UnimplementedItemServiceHandler) DeleteItem(context.Context, *connect_go.Request[v1.DeleteItemRequest]) (*connect_go.Response[v1.DeleteItemResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.item.v1.ItemService.DeleteItem is not implemented"))
}

func (UnimplementedItemServiceHandler) ListItems(context.Context, *connect_go.Request[v1.ListItemsRequest]) (*connect_go.Response[v1.ListItemsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.item.v1.ItemService.ListItems is not implemented"))
}
