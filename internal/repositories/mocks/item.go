// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/RyseUp/in-game-item-system/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// Item is an autogenerated mock type for the Item type
type Item struct {
	mock.Mock
}

// CreateItem provides a mock function with given fields: ctx, item
func (_m *Item) CreateItem(ctx context.Context, item *models.Item) error {
	ret := _m.Called(ctx, item)

	if len(ret) == 0 {
		panic("no return value specified for CreateItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Item) error); ok {
		r0 = rf(ctx, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteItem provides a mock function with given fields: ctx, itemID
func (_m *Item) DeleteItem(ctx context.Context, itemID string) error {
	ret := _m.Called(ctx, itemID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, itemID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetItemByID provides a mock function with given fields: ctx, itemID
func (_m *Item) GetItemByID(ctx context.Context, itemID string) (*models.Item, error) {
	ret := _m.Called(ctx, itemID)

	if len(ret) == 0 {
		panic("no return value specified for GetItemByID")
	}

	var r0 *models.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Item, error)); ok {
		return rf(ctx, itemID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Item); ok {
		r0 = rf(ctx, itemID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Item)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, itemID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListItem provides a mock function with given fields: ctx, limit, offset
func (_m *Item) ListItem(ctx context.Context, limit int32, offset int32) ([]*models.Item, error) {
	ret := _m.Called(ctx, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for ListItem")
	}

	var r0 []*models.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32) ([]*models.Item, error)); ok {
		return rf(ctx, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32) []*models.Item); ok {
		r0 = rf(ctx, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Item)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32, int32) error); ok {
		r1 = rf(ctx, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateItem provides a mock function with given fields: ctx, item
func (_m *Item) UpdateItem(ctx context.Context, item *models.Item) error {
	ret := _m.Called(ctx, item)

	if len(ret) == 0 {
		panic("no return value specified for UpdateItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Item) error); ok {
		r0 = rf(ctx, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewItem creates a new instance of Item. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewItem(t interface {
	mock.TestingT
	Cleanup(func())
}) *Item {
	mock := &Item{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
